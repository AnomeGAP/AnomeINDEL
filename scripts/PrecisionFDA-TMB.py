#!/bin/env python
#
# @note Copyright (C) 2020, Atgenomix Incorporated. All Rights Reserved.
#       This program is an unpublished copyrighted work which is proprietary to
#       Atgenomix Incorporated and contains confidential information that is not to
#       be reproduced or disclosed to any other person or entity without prior
#       written consent from Atgenomix, Inc. in each and every instance.
#
# @warning Unauthorized reproduction of this program as well as unauthorized
#          preparation of derivative works based upon the program or distribution of
#          copies by sale, rental, lease or lending are violations of federal copyright
#          laws and state trade secret laws, punishable by civil and criminal penalties.
#
# @file    PEDMerger.py
#
# @brief   Merge all of PED files generated by GTool.
#
# @author  Chung-Tsai Su(chungtsai.su@atgenomix.com)
#
# @date    2020/04/09
#
# @version 1.0
#
# @remark
#

import sys
import getopt
import re


def usage():
    print(
        "PrecisionFDA-TMB.py -i <Input Merged VCF file> -o <Output File VCF file>")
    print("Argument:")
    print("\t-h: Usage")
    print("\t-i: Input Merged VCF file")
    print("\t-o: Output File VCF file")
    print("Usage:")
    print("\tpython3 ./PrecisionFDA-TMB.py -i A.merged.vcf -o output/A.final.vcf")

    return


def process(ifn, ofn):
    add_header = 1
    ifd = open(ifn, "r")
    ofd = open(ofn, "w")
    for line in ifd:
        if line.startswith("##"):
            ofd.write("%s" % line)
            if line.startswith("##INFO") and add_header == 1 :
                add_header = 0
                ofd.write("##FILTER=<ID=SOMATIC,Description=\"Somatic variant with high confidence by SeqsLab\">\n")
                ofd.write("##FILTER=<ID=GERMLINE,Description=\"Germline variant with high confidence by SeqsLab\">\n")
        elif line.startswith("#"):
            items = line.split("\t")
            ofd.write("## variants from multiple callers will be filtered by ATGENOMIX export rules\n")
            ofd.write("%s\n" % "\t".join(items[:10]))
        else:
            #items[6] ==> FILTER
            # print("%s" % line)
            items = line.split("\t")
            if items[6].startswith("PASS"):
                is_somatic = 0

                if not items[9].startswith("."):   #Pisces
                    k = items[8].split(":")
                    v = items[9].split(":")
                    d = {}
                    for i in range(0, len(k)):
                        d[k[i]] = v[i]
                    # print("GT = %s" % d["GT"])
                    if d["GT"] == '0/1':
                        # print("GT = %s" % d["GT"])
                        a = d["AD"].split(",")
                        # print("AD= %s %s" % (a[0], a[1]))
                    if min(int(a[0]), int(a[1])) <= 0.3 * (int(a[0]) + int(a[1])):
                        ofd.write("%s\tSOMATIC\t%s\t%s\n" % ("\t".join(items[:6]), "\t".join(items[7:9]), items[9]))
                    else:
                        ofd.write("%s\tGERMLINE\t%s\t%s\n" % ("\t".join(items[:6]), "\t".join(items[7:9]), items[9]))
                elif not items[10].startswith("."):     #Mutect2
                    k = items[8].split(":")
                    v = items[10].split(":")
                    d = {}
                    for i in range(0, len(k)):
                        d[k[i]] = v[i]
                    # print("GT = %s" % d["GT"])
                    if d["GT"] == '0/1':
                        # print("GT = %s" % d["GT"])
                        a = d["AD"].split(",")
                        # print("AD= %s %s" % (a[0], a[1]))
                    if min(int(a[0]), int(a[1])) <= 0.3 * (int(a[0])+int(a[1])):
                        ofd.write("%s\tSOMATIC\t%s\t%s\n" % ("\t".join(items[:6]), "\t".join(items[7:9]), items[10]))
                    else:
                        ofd.write("%s\tGERMLINE\t%s\t%s\n" % ("\t".join(items[:6]), "\t".join(items[7:9]), items[10]))

                elif not items[11].startswith("."):     #DeepVariant
                    ofd.write("%s\tGERMLINE\t%s\t%s\n" % ("\t".join(items[:6]), "\t".join(items[7:9]), items[11]))
                elif not items[12].startswith("."):     #HaplotypeCaller
                    ofd.write("%s\tGERMLINE\t%s\t%s\n" % ("\t".join(items[:6]), "\t".join(items[7:9]), items[11]))
            else:
                s = re.sub(r"germline", "GERMLINE", items[6])
                if not items[9].startswith("."):   #Pisces
                    ofd.write("%s\t%s\t%s\t%s\n" % ("\t".join(items[:6]), s, "\t".join(items[7:9]), items[9]))
                elif not items[10].startswith("."):     #Mutect2
                    ofd.write("%s\t%s\t%s\t%s\n" % ("\t".join(items[:6]), s, "\t".join(items[7:9]), items[10]))
                elif not items[11].startswith("."):     #DeepVariant
                    ofd.write("%s\t%s\t%s\t%s\n" % ("\t".join(items[:6]), s, "\t".join(items[7:9]), items[11]))
                elif not items[12].startswith("."):     #HaplotypeCaller
                    ofd.write("%s\t%s\t%s\t%s\n" % ("\t".join(items[:6]), s, "\t".join(items[7:9]), items[12]))

    ofd.close()
    ifd.close()


def main(argv):
    ifile = ""
    ofile = "final.vcf"

    try:
        opts, args = getopt.getopt(argv, "hi:o:")
    except getopt.GetoptError:
        usage()
        sys.exit(1)

    for opt, arg in opts:
        if opt == '-h':
            usage()
            sys.exit()
        elif opt == "-i":
            ifile = arg
        elif opt == "-o":
            ofile = arg

    process(ifile, ofile)
    return


if __name__ == '__main__':
    main(sys.argv[1:])

#!/bin/env python
#
# @note Copyright (C) 2020, Atgenomix Incorporated. All Rights Reserved.
#       This program is an unpublished copyrighted work which is proprietary to
#       Atgenomix Incorporated and contains confidential information that is not to
#       be reproduced or disclosed to any other person or entity without prior
#       written consent from Atgenomix, Inc. in each and every instance.
#
# @warning Unauthorized reproduction of this program as well as unauthorized
#          preparation of derivative works based upon the program or distribution of
#          copies by sale, rental, lease or lending are violations of federal copyright
#          laws and state trade secret laws, punishable by civil and criminal penalties.
#
# @file    PEDMerger.py
#
# @brief   Merge all of PED files generated by GTool.
#
# @author  Chung-Tsai Su(chungtsai.su@atgenomix.com)
#
# @date    2020/04/09
#
# @version 1.0
#
# @remark
#


import sys
import getopt
import glob
import os.path
import re
from collections import defaultdict

# CONST Parameter
DIVISOR = 100
# MAX_CIGAR_STRING = 15

# Default Parameter
MIN_LENGTH = 50
MIN_OFFSET = 400
MIN_MAPQ = 60


def usage():
    print(
        "PEDMerger.py -i <Input PED folder> -o <Output PED File>")
    print("Argument:")
    print("\t-h: Usage")
    print("\t-i: Input PED folder")
    print("\t-o: Output PED file")
    print("Usage:")
    print("\tpython3 ./PEDMeger.py -i ~/input_ped/ -o ~/output/merged.ped")

    return


def merger(ifolder, ofn):
    fd_list = []
    fn_list = []
    for filename in sorted(glob.glob(os.path.join(ifolder, '*.ped'))):
        print("%s" % filename)
        fn_list.append(filename)
        fd_list.append(open(filename))

    ofd = open(ofn, "w")
    for line in fd_list[0]:
        buf = line.strip()
        print("buf=[%s]" % buf)
        for i in range(1, len(fd_list)):
            items = fd_list[i].readline().strip().split("\t")
            print("items[0]=[%s]" % items[0])
            if buf.startswith(items[0]):
                buf = buf + "\t" + "\t".join(items[6:])
            else:
                print("ERROR: %s in %s is not expected." % (items[0], fn_list[i]))
                break
        ofd.write("%s\n" % buf)

    for i in range(len(fd_list)):
        fd_list[i].close()
    ofd.close()
    return


def main(argv):
    ifolder = ""
    ofile = ""

    try:
        opts, args = getopt.getopt(argv, "hi:o:")
    except getopt.GetoptError:
        usage()
        sys.exit(1)

    for opt, arg in opts:
        if opt == '-h':
            usage()
            sys.exit()
        elif opt == "-i":
            ifolder = arg
        elif opt == "-o":
            ofile = arg

    # error handling for input parameters
    if ifolder == "":
        print("Error: '-i' is required")
        usage()
        sys.exit(2)
    elif not os.path.isdir(ifolder):
        print("Error: input folder(%s) is not existed" % ifolder)
        usage()
        sys.exit(3)
    if ofile == "":
        print("Error: '-o' is required")
        usage()
        sys.exit(4)

    # Main Function
    merger(ifolder, ofile)

    return


if __name__ == '__main__':
    main(sys.argv[1:])

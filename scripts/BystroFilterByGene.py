#!/usr/bin/env python3
#
# @note Copyright (C) 2016, Anome Incorporated. All Rights Reserved.
#       This program is an unpublished copyrighted work which is proprietary to
#       Anome Incorporated and contains confidential information that is not to
#       be reproduced or disclosed to any other person or entity without prior
#       written consent from Anome, Inc. in each and every instance.
#
# @warning Unauthorized reproduction of this program as well as unauthorized
#          preparation of derivative works based upon the program or distribution of
#          copies by sale, rental, lease or lending are violations of federal copyright
#          laws and state trade secret laws, punishable by civil and criminal penalties.
#
# @file    VCFComparison.py
#
# @brief   An example to compare VCF generated by SNP Array and other sources
#
# @author  A-Tsai Su(chungtsai_su@anome.com.tw)
#
# @date    2017/05/17
#
# @version 1.0
#
# @remark
#

import sys
import getopt
import os.path
import re


def Usage():
    ''' Description: Program Usage
        Argument:    NONE
        Return:	     NONE
    '''
    print("BystroFilterByGene.py -i <Bystro TSV file> -g <Gene List file>")
    print("Argument:")
    print("\t-h: Usage")
    print("\t-i: <VCF file>")
    print("\t-g: <Gene List file>")
    print("Usage:")
    print("\t./BystroFilterByGene.py -i ./bystro/y02_y01_balb_cj_contam_filtered2_d100_vcf.annotation.tsv -g ./TSGene1.0/Mouse_628_TSGs.txt")

    return


def BystroFilterByGene(ifn, gfn):
    glist = []

    gfd = open(gfn, "r")
    for line in gfd:
        if re.match("Gene_symbol", line):
            continue
        glist.append(line.split("\t")[2])
    gfd.close()
    print("There are %d genes. " % len(glist))

    count = 0
    gset = set(glist)
    ifd = open(ifn, "r")
    for line in ifd:
        if re.match("^#", line):
            #print "Skip comment: %s" % (line)
            continue

        line = line.strip()
        items = line.split('\t')
        name = items[38].split(";")[0].split("|")[0]
        #print("1\t%s\t%s" % (items[1], name))
        if name in gset:
            print("%s\t%s:%s:%s(%s)\t%s" % (items[6], items[0], items[1], items[4], items[2], name))
            count += 1
    print("There are %d variants in Oncogene or TSG" % count)
    ifd.close()

    return


def main(argv):
    infile = ""
    genefile = ""

    try:
        opts, args = getopt.getopt(argv,"hi:g:")
    except getopt.GetoptError:
        Usage()
        sys.exit(1)

    for opt, arg in opts:
        if opt == '-h':
            Usage()
            sys.exit()
        elif opt in ("-i"):
            infile = arg
        elif opt in ("-g"):
            genefile = arg
    if not infile or not genefile:
        Usage()
        sys.exit(2)

    #Main Function
    BystroFilterByGene(infile, genefile)

    return

if __name__ == '__main__':
    main(sys.argv[1:])
